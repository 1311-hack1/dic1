const axios = require('axios');

class EnrollmentClient {
  constructor(serverUrl = 'http://localhost:3000') {
    this.serverUrl = serverUrl;
    this.axios = axios.create({
      baseURL: serverUrl,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }

  /**
   * Request attestation challenge from server
   */
  async requestChallenge() {
    try {
      console.log('üîÑ Requesting attestation challenge...');
      
      const response = await this.axios.post('/api/attestation/challenge');
      
      if (response.data.success) {
        console.log('‚úÖ Challenge received:', response.data.challenge.challengeId);
        return response.data.challenge;
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Challenge request failed:', error.message);
      throw error;
    }
  }

  /**
   * Simulate device enrollment with mock attestation data
   */
  async enrollDevice(challenge) {
    try {
      console.log('üîÑ Starting device enrollment...');

      // Mock device public key (in real app, generated by Android Keystore)
      const mockDevicePublicKey = `-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMOCK2u1BxQhK7pJ8ZvKvBxzGkqJR
7FAKE_DEVICE_PUBLIC_KEY_FOR_TESTING_ONLY_NOT_REAL_HARDWARE_BACKED
k8mGpQnKRJwJ5vBzGkqJR7k8mGpQnKRJwJ5vBzGkqJR7k8mGpQ==
-----END PUBLIC KEY-----`;

      // Mock attestation chain (in real app, provided by Android Keystore)
      const mockAttestationChain = `-----BEGIN CERTIFICATE-----
MIICxjCCAm2gAwIBAgIJAMOCK2u1BxQhMA0GCSqGSIb3DQEBCwUAMHkxCzAJBgNV
FAKE_ATTESTATION_CERTIFICATE_CHAIN_FOR_TESTING_ONLY_NOT_REAL
BAYTAlVTMQswCQYDVQQIDAJDQTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIG
A1UECgwLUGF5UGFsIEluYy4xEzARBgNVBAsMCnNhbmRib3hfYXBpMRQwEgYDVQQD
DAtGQUtFX0NB==
-----END CERTIFICATE-----`;

      const enrollmentRequest = {
        devicePublicKeyPem: mockDevicePublicKey,
        attestationChainPem: mockAttestationChain,
        nonce: challenge.nonce,
        deviceInfo: {
          model: 'Test Device',
          manufacturer: 'Mock Manufacturer',
          androidVersion: '13',
          securityPatchLevel: '2024-01-01'
        }
      };

      const response = await this.axios.post('/api/enrollment/enroll', enrollmentRequest);
      
      if (response.data.success) {
        console.log('üéâ Device enrolled successfully!');
        console.log('Device ID:', response.data.enrollment.deviceId);
        return response.data.enrollment;
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Enrollment failed:', error.response?.data?.error || error.message);
      throw error;
    }
  }

  /**
   * Verify issued certificate
   */
  async verifyCertificate(certificatePem) {
    try {
      console.log('üîÑ Verifying certificate...');
      
      const response = await this.axios.post('/api/enrollment/verify-certificate', {
        certificatePem
      });
      
      if (response.data.success) {
        console.log('‚úÖ Certificate verification completed');
        return response.data.verification;
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Certificate verification failed:', error.message);
      throw error;
    }
  }

  /**
   * Full enrollment flow demonstration
   */
  async demonstrateEnrollmentFlow() {
    try {
      console.log('\nüöÄ Starting DIC Enrollment Flow Demo\n');

      // Step 1: Request challenge
      const challenge = await this.requestChallenge();
      console.log('Challenge nonce:', challenge.nonce.substring(0, 16) + '...');

      // Step 2: Enroll device
      const enrollment = await this.enrollDevice(challenge);
      console.log('\nüìú Device Identity Certificate issued:');
      console.log('Device ID:', enrollment.deviceId);
      console.log('Serial Number:', enrollment.serialNumber);
      console.log('Expires:', enrollment.expiresAt);

      // Step 3: Verify certificate
      const verification = await this.verifyCertificate(enrollment.deviceIdentityCertificate);
      console.log('\nüîç Certificate Verification:');
      console.log('Valid:', verification.valid);
      console.log('Device ID:', verification.deviceId);

      console.log('\n‚úÖ Enrollment flow completed successfully!');
      
      return {
        challenge,
        enrollment,
        verification
      };

    } catch (error) {
      console.error('\n‚ùå Enrollment flow failed:', error.message);
      throw error;
    }
  }
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
  module.exports = EnrollmentClient;
}

// Demo function for direct execution
async function runDemo() {
  const client = new EnrollmentClient();
  await client.demonstrateEnrollmentFlow();
}

// Run demo if executed directly
if (require.main === module) {
  runDemo().catch(console.error);
}
